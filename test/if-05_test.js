const h = require('../if-05.js');

QUnit.test("ЗАДАЧА 05. Написать функцию h(a, b, c), которая дает длину высоты,опущенной на сторону a.", function(assert){

	assert.deepEqual(h( 0, 0, 0),-1, "Не выполнено h( 0, 0, 0) ===-1");
	assert.deepEqual(h( 0, 2, 3),-1, "Не выполнено h( 0, 2, 3) ===-1");
	assert.deepEqual(h( 9, 0, 4),-1, "Не выполнено h( 9, 0, 4) ===-1");
	assert.deepEqual(h( 1, 3, 0),-1, "Не выполнено h( 1, 3, 0) ===-1"); //сторона должна существовать

	assert.deepEqual(h(-6,-5,-4),-1, "Не выполнено h(-6,-5,-4) ===-1");
	assert.deepEqual(h(-3, 2, 3),-1, "Не выполнено h(-3, 2, 3) ===-1");
	assert.deepEqual(h( 4,-5, 3),-1, "Не выполнено h( 4,-5, 3) ===-1");
	assert.deepEqual(h( 5, 8,-7),-1, "Не выполнено h( 5, 8,-7) ===-1"); //сторона не может быть отрицательной

	assert.deepEqual(h( 8, 4, 4),-1, "Не выполнено h( 8, 4, 4) ===-1");
	assert.deepEqual(h( 3, 6, 3),-1, "Не выполнено h( 3, 6, 3) ===-1");
	assert.deepEqual(h( 2, 2, 4),-1, "Не выполнено h( 2, 2, 4) ===-1"); //стороны не должны лежать на одной прямой

	assert.deepEqual(h( 9, 2, 3),-1, "Не выполнено h( 9, 2, 3) ===-1");
	assert.deepEqual(h( 3, 8, 4),-1, "Не выполнено h( 3, 8, 4) ===-1");
	assert.deepEqual(h( 1, 3, 7),-1, "Не выполнено h( 1, 3, 7) ===-1"); //сторона не может быть длиннее чем сумма двух других

	assert.deepEqual(h( 5, 3, 4), 2.4, "Не выполнено h( 5, 3, 4) === 2.4");
	assert.deepEqual(h( 5, 5, 5), 5 * Math.sin(Math.PI / 3), "Не выполнено h( 5, 5, 5) === 4.330127018922193")
  }
);
// Написать функцию h(a, b, c), которая дает длину высоты,опущенной на
// сторону a , в треугольнике со сторонами a , b , c , если такой треугольник
// существует, и дает -1 в противном случае.