const f = require('../if-13.js');

QUnit.test("ЗАДАЧА 13. S(x1, y1, x2, y2, x3, y3) == Вершины квадрата", 
	function(assert){
		assert.deepEqual(f(-2, 2, -1, 2, -2, 1), true, "Не выполнено f(-2, 2, -1, 2, -2, 1) являются вершинами квадрата");
		assert.deepEqual(f(1, 1, 1, 2, 2, 1), true, "Не выполнено f(1, 1, 1, 2, 2, 1) являются вершинами квадрата");
		assert.deepEqual(f(1, -1, 2, -1, 1, -2), true, "Не выполнено f(1, -1, 2, -1, 1, -2) являются вершинами квадрата");
		assert.deepEqual(f(-1, -1, -2, -1, -2, -2), true, "Не выполнено f(-1, -1, -2, -1, -2, -2) являются вершинами квадрата");
		assert.deepEqual(f(-1, 1, 0, 0, 1, 0), false, "Не выполнено f(-1, 1, 0, 0, 1, 0) являются вершинами фигуры, отличной от квадрата");
		assert.deepEqual(f(1, -1, 2, -1, 3, -2), false, "Не выполнено f(1, -1, 2, -1, 3, -2) являются вершинами фигуры, отличной от квадрата");
		assert.deepEqual(f(0, 0, 0, 0, 0, 0), false, "Не выполнено f(0, 0, 0, 0, 0, 0) являются началом координат");
		assert.deepEqual(f(2, 1, 1, 2, 3, 2), true, "Не выполнено f(2, 1, 1, 2, 3, 2) являются вершинами квадрата");
		assert.deepEqual(f(4, 2, 6, 3, 3, 4), true, "Не выполнено f(4, 2, 6, 3, 3, 4) являются вершинами квадрата");
		assert.deepEqual(f(-3, 3, -2, 5, -4, 6), true, "Не выполнено f(-3, 3, -2, 5, -4, 6) являются вершинами квадрата");
		assert.deepEqual(f(6, 4, 5, 5, 2, 6), false, "Не выполнено f(6, 4, 5, 5, 2, 6) являются вершинами квадрата");
	}
);